#!/usr/bin/env bash

##### utilities

function out() { printf "%s\n" "$*" >&1; } # stdout for output to be consumed by programs
function msg() { printf "%b\n" "$*" >&2; } # stderr for messaging to be read by users; may use color if [ -t 2 ] is true

function info() {
  local -r col_='\033[1;32m' # light green
  local -r _col='\033[0m'
  if [ -t 2 ]; then msg "$col_$*$_col" && return 0; else msg "--- $*" && return 0; fi
}

function warn() {
  local -r col_='\033[1;33m' # light orange
  local -r _col='\033[0m'
  if [ -t 2 ]; then msg "$col_$*$_col" && return 0; else msg "warn: $*" && return 0; fi
}

function error() {
  local -r col_='\033[1;31m' # light red
  local -r _col='\033[0m'
  if [ -t 2 ]; then msg "$col_$*$_col" && return 0; else msg "error: $*" && return 0; fi
}

function exit_on_error() {
  local -r exit_code=$1
  shift
  [[ $exit_code ]] && ((exit_code != 0)) && {
    error "$@"
    exit "$exit_code"
  }
}

#####

SERVICE="not specified"

function usage() {
cat << EOM
provides the skeleton of a simple cli

usage:
  $(basename "$0") [<service> | --<option>]

options:
  -h --help   show this usage info
  <service>   foo, bar, baz

EOM
}

function rando() {
  local -r lo=$1
  local -r hi=$2
  shuf -i "$lo"-"$hi" -n 1
}

function do_thing() {
  local -r svc="$1"
  local -r rn=$(rando 0 100)

  msg "$svc $rn"
  if [[ "$rn" -gt 49 ]]; then return 1; else return 0; fi
}


if [ $# -eq 0 ]; then usage && exit 2; fi

while [ $# -gt 0 ]
do
  opt="$1"

  case $opt in
    -h|--help)
      shift # past option
      usage && exit 0
      ;;

    foo|bar|baz)
      SERVICE="$opt"
      shift # past value
      ;;

    *)    # unmatched option
      warn ""
      warn "error: unknown option '$opt'."
      warn ""
      exit 1
      ;;
  esac
done

case $SERVICE in
  foo)
    info "preparing to foo.."
    do_thing "foo"
    ;;

  bar)
    info "starting to bar.."
    do_thing "bar"
    ;;

  baz)
    info "beginning to baz.."
    do_thing "baz"
    ;;

  *)    # unmatched option
    warn ""
    warn "error: unknown service '$SERVICE'"
    warn ""
    exit 1
    ;;
esac

exit_on_error $? "$SERVICE failed\n"

info "done."
info ""
exit 0
